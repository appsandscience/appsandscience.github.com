<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sencha Touch | Apps and Science]]></title>
  <link href="http://www.appsandscience.com/blog/categories/sencha-touch/atom.xml" rel="self"/>
  <link href="http://www.appsandscience.com/"/>
  <updated>2012-07-14T13:33:25-05:00</updated>
  <id>http://www.appsandscience.com/</id>
  <author>
    <name><![CDATA[Nikos Bentenitis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Structure of a Sencha Touch Controller]]></title>
    <link href="http://www.appsandscience.com/the-structure-of-a-sencha-touch-controller-2/"/>
    <updated>2012-04-16T02:00:33-05:00</updated>
    <id>http://www.appsandscience.com/the-structure-of-a-sencha-touch-controller-2</id>
    <content type="html"><![CDATA[<p>In the past three blog posts, I used the CityBars Sencha Touch application, to</p>

<ol>
<li><a href="http://www.appsandscience.com/making-sense-of-sencha-touch-the-citybars-app-views/">to define a few terms used in Sencha Touch development</a>,</li>
<li><a href="http://www.appsandscience.com/the-structure-of-a-sencha-touch-application/">to explain the structure of a Sencha Touch application</a>, and</li>
<li><a href="http://www.appsandscience.com/how-to-write-code-for-the-views-in-sencha-touch/">to demonstrate how the code for the graphical user interface is generated.</a></li>
</ol>


<p>In this post I will describe how the application</p>

<ol>
<li>finds the user's location,</li>
<li>searches Yelp for bars near the user, and</li>
<li>responds when the user taps on a with the bar that the user is interested in.</li>
</ol>


<p>All this logic is contained in a <em>controller</em> JavaScript file, under the controller subdirectory. The rest of this blog post will explain the various parts of the code in the controller file.</p>

<h3>How References and Controls work in the Controllers of Sencha Touch</h3>

<p>To be able to read the values of some interface elements, and to set or manipulate them, the controller needs a reference to them. Each reference within the controller is defined as a pair. For instance the list of bars in the ListContainer, has an id of <em>#datalist</em> (see <a href="http://www.appsandscience.com/how-to-write-code-for-the-views-in-sencha-touch/">my previous blog post</a> for a description of the views of the application.) This list of bars is referred to by the controller as dataList. The exact syntax is shown below:</p>

<p>``` js</p>

<pre><code>Ext.define('CityBars.controller.Business', {
    extend: 'Ext.app.Controller',
config: {
    refs: {
        dataList: '#dataList',
        listCard: '#listCard',
        mainNav: 'mainnav',
        detailCard: '#detailCard'
    },
    control: {
        "#dataList": {
            itemtap: 'onListItemTap'
        }
    }
},
</code></pre>

<p>```</p>

<p>In the code snippet above, the first line is used to define the controller's name (Business) and to declare it as a controller, as opposed to a view, for instance. The config part of the code has two parts. The <em>refs</em> part that I referred to above and the control part, that I will explain in a bit. Notice the four of references.</p>

<ol>
<li>The first assigns the name <strong>dataList</strong> to the list component with id <strong>#datalist</strong> (note the # character).</li>
<li>The second assigns the name <strong>listCard</strong> to the list card for each bar, a card that has the id <strong>#listCard</strong> in the ListContainer.js file.</li>
<li>The third assings the name <strong>mainNav</strong> to the navigation panel <strong>mainav</strong> which is the navigation panel in the <em>MainNav.js</em>. Because the controller refers to the navigation view as a whole, no # is used before the name <strong>mainnav</strong>.</li>
<li>Similarly, the element with id <strong>#detailCard</strong> gets a reference <strong>detailCard</strong> in the controller.</li>
</ol>


<p>The controller can now refer to the four elements above and get their values or properties with function that Sencha Touch has implemented. These functions are called getters. For the <strong>datalist</strong> reference though, the application would like to respond when the user taps on it. For that reason a control needs to be defined. More specifically, the event that the controller is waiting for is <strong>itemtap</strong>. As soon as this event occurs, the function <strong>onListItemTap</strong> is executed. That function has to be defined by the user later on in the controller.</p>

<p>Now that the references and the controllers are set, the logic of the application has to be specified. But before any logic is introduced to respond to the tapping of an item, the application has to be able to find the user's location and to find nearby bars.</p>

<h3>How Sencha Touch finds the user's location</h3>

<p>Sencha Touch contains a few utilities that access the information that a phone can supply. In the case of geolocation, Sencha Touch uses <em>Ext.util.Geolocation</em>. The function to get the user's location is called <strong>getLocation</strong> in this application, and it is shown below:</p>

<p>``` js</p>

<pre><code>getLocation: function(callback) {
    if (navigator &amp;&amp; navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
            callback(position);
        }, function(error) {
            alert('You are not connected to the Internet');
        });
    }
</code></pre>

<p>```</p>

<p>The function above checks whether the user is connected to the internet, and if yes, it returns the user's latitude and longitude.</p>

<h3>How Sencha Touch finds businesses near the user</h3>

<p>With the user's location known, the application connects to Yelp and pulls that information. In order for this to happen however, the application needs to know the type of information that is going to be returned by Yelp, as well as the names of the fields that are returned. The information about the type of connection with Yelp is encapsulated in a Sencha Touch <strong>Store</strong> and the fields in a Sencha Touch <strong>Model</strong>. Models and stores go together, but let's start with the store.</p>

<h4>The structure of a Sencha Touch Store</h4>

<p>The information about a store is kept in a file under the <em>store</em> directory. The contents of that file are shown below:</p>

<p>``` js</p>

<pre><code>Ext.define('CityBars.store.BusinessStore', {
    extend: 'Ext.data.Store',
    requires: [
        'CityBars.model.Business'
    ],
config: {
    model: 'CityBars.model.Business',
    storeId: 'BusinessStore',
    proxy: {
        type: 'jsonp',
        reader: {
            type: 'json',
            rootProperty: 'businesses'
        }
    }
}
});
</code></pre>

<p>```</p>

<p>First, the store is given a name <em>BusinessStore</em> and declared as a store. Because the store always corresponds to a model, this is declared with the requires statemement. The store is configured with the model that it is related to, an id is given to it for easy referencing, and information about the connection is displayed in the reader statement. Because the information is pulled from an external website (Yelp,) the type of the store is <strong>jsonp</strong>. Because the information is returned from Yelp as a JSON file, the reader of the file is of <strong>json</strong> type, and only everything under the <strong>businesses</strong> property is read.</p>

<h4>The structure of a Sencha Touch Model</h4>

<p>The information about a model is kept in a JavaScript file under the <em>model</em> directory. The contents of the file are shown below:</p>

<p>``` js</p>

<pre><code>Ext.define('CityBars.model.Business', {
    extend: 'Ext.data.Model',
    config: {
        fields: [
            {
                name: 'id',
                type: 'int'
            },
            {
                name: 'name'
            },
            {
                name: 'latitude'
            },
            {
                name: 'longitude'
            },
            {
                name: 'address1'
            },
            {
                name: 'address2'
            },
            {
                name: 'address3'
            },
            {
                name: 'phone'
            },
            {
                name: 'state_code'
            },
            {
                name: 'mobile_url'
            },
            {
                name: 'rating_img_url_small'
            },
            {
                name: 'photo_url'
            }
        ]
    }
});
</code></pre>

<p>```</p>

<p>This model is given a name, <em>Business</em>, and it is declared as a model. Then the fields served by the JSON file are described. They are id, name, latitude, longitude, etc. Those fields can be found on Yelp's website.</p>

<h4>The init function in a Sencha Touch Controller</h4>

<p>Now that the model and the store for the application have been defined, the controller, can perform a search and serve the information to the user. This is done with the following code:</p>

<p>``` js</p>

<pre><code>init: function() {
    this.getLocation(function (location) {
        this.getBusinesses(location, function (store) {
            this.getDataList().setStore(store);
        });
    });
},
</code></pre>

<p>```</p>

<p>In the few lines of code above, a lot of logic for the application is contained. First, the function that is defined in the above lines is run when the controller is initialized, and that is as soon as the application launches. Each line after the first starts with <strong>this</strong>, a shortcut to the current controller. In other words, when the controller initializes, the <strong>getLocation</strong> function contained in the same file is run, then the <strong>getLocation</strong> function is run and finally the store for the <strong>dataList</strong> defined above is set to the store that was also defined above. With the sequence of these steps, the initial list of the application is populated with entries, and the controller is ready to respond to the user's taps.</p>

<h3>How a Sencha Touch Controller responds to a user's tap</h3>

<p>The function executed when a list item is tapped is shown below:</p>

<p>``` js</p>

<pre><code>onListItemTap: function(dataview, index, target, record, e, options) {
    if (record) {
    if (!this.details) {
        this.details = Ext.create('CityBars.view.DetailPanel', {
            title: 'Details'
        });
    }
    var map = this.details.child('#detailMap');
    map.setMapOptions({
        zoom: 17
    });
    map.setMapCenter({
        latitude: record.get('latitude'),
        longitude: record.get('longitude')
    });
    var info = this.details.child('#contact').child('#info');
    info.child('#photo').setData(record.data);
    info.child('#data').setData(record.data);
    this.getMainNav().push(this.details);
}
}
</code></pre>

<p>```</p>

<p>The function is only run if a record exists. If a record exists and the details panel does not, a new panel is created with the title 'Details'. A child of the details panel is a map of the business, with id <em>detailMap</em>. Defining the map of the business as a variable, map, allows us to easily refer to it in subsequent commands. These commands set the zoom level, and set the center of the map to the latitude and longitude of the business. Defining the container of the Detail Panel that contains the info about the business, allows us to easily refer to it in subsequent commands. These commands set the data for the photo, and the data. As soon as the assingments are made, the main navigation brings the details view in the foreground from the right side of the screen. This is called a push transition.</p>

<h3>Conclusion</h3>

<p>And here you have it. This is how the controller works in sync with the application's model, store and views to run the application.</p>

<p>This concludes the four-part series that described the structure and the logic of a Sencha Touch application. I hope that this as well as my previous three posts will help you understand the explanations given in the <a href="http://vimeo.com/36420727">screencast</a> , where the CityBars application was originally developed using Sencha's <a href="http://www.sencha.com/products/designer/">Designer software</a>. The source code for the application is available <a href="http://img1.sencha.com/files/misc/citybars.xda.zip">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Write Code for the Views in Sencha Touch]]></title>
    <link href="http://www.appsandscience.com/how-to-write-code-for-the-views-in-sencha-touch/"/>
    <updated>2012-03-12T02:00:00-05:00</updated>
    <id>http://www.appsandscience.com/how-to-write-code-for-the-views-in-sencha-touch</id>
    <content type="html"><![CDATA[<p>In the past few blog posts, I described <a href="http://www.appsandscience.com/making-sense-of-sencha-touch-the-citybars-app-views/">few basic terms</a> used in Sencha Touch and <a href="http://www.appsandscience.com/the-structure-of-a-sencha-touch-application/">explained the code in designer.html and designer.js</a> from the CityBars application, that I have <a href="http://www.appsandscience.com/making-sense-of-sencha-touch-the-citybars-app-views/">described before</a>. In this post, I will briefly explain the code in the three Views of the application and in a future post, I will describe the remaining components of the application.</p>

<p>The first view to describe is <strong>MainNav</strong>, the code of which is stored under <strong>app/view/MainNav.js</strong>, according to the MVCS guidelines provided by Sencha. (See my <a href="http://www.appsandscience.com/the-structure-of-a-sencha-touch-application/">previous post</a> for details on the MVCS model.) The code of <strong>MainNav.js</strong> is reproduced below:</p>

<p>``` js</p>

<pre><code>Ext.define('CityBars.view.MainNav', { extend: 'Ext.NavigationView',
requires: [ 'CityBars.view.ListContainer' ],
config: {
    ui: 'light',
    navigationBar: {
        ui: 'light'
    },
    items: [
        {
            xtype: 'listcontainer',
            title: 'CityBars',
            id: 'listCard'
        }
    ]
}
});
</code></pre>

<p>```</p>

<p>Let’s analyze it step-by-step. The first few lines of the code</p>

<p>``` js</p>

<pre><code>Ext.define('CityBars.view.MainNav', { extend: 'Ext.NavigationView',
requires: [ 'CityBars.view.ListContainer' ],
</code></pre>

<p>```</p>

<p>specify that the view is part of the CityBars application, that the view is called <strong>MainNav</strong> and that its code is stored under the <strong>view</strong> subdirectory of the <strong>app</strong> directory. The <strong>MainNav</strong> View is a <strong>NavigationView</strong>, a standard component of the Sencha Touch framework. For <strong>MainNav</strong> to work, another view, called <strong>ListContainer</strong>, also stored under the <strong>view</strong> subdirectory, is necessary. (I will describe the <strong>ListContainer</strong> view in a little bit.) The rest of the code describes the components that <strong>MainNav</strong> consists of. As I mentioned before, <strong>MainNav</strong> is a special case of a standard Sencha-Touch component called <strong>NavigationView</strong>. The generic <strong>NavigationView</strong> has to be specialized for this applications, and that is achieved with the following code:</p>

<p>``` js</p>

<pre><code>config: {
    ui: 'light',
    navigationBar: {
        ui: 'light'
    },
    items: [
        {
            xtype: 'listcontainer',
            title: 'CityBars',
            id: 'listCard'
        }
    ]
}
</code></pre>

<p>```</p>

<p>According to the code above, the theme of the <strong>NavigationView</strong> is <em>light</em>, which means that colors have lighter shades, and also that the navigation bar at the top of the <strong>NavigationView</strong> is colored lightly. The view has one component, a <strong>Container</strong> with a list, and a nickname (xtype) of <em>listcontainer</em>. The title of the <em>listcontainer</em> is ‘CityBars’ and its identification string is <em>listCard</em>. The identification string (id) is added so that the <strong>Controller</strong>, the “mind,” of the application, can refer to it easily. (Although for this application, the controller does not use this information.)</p>

<p>The <em>listcontainer</em> that was first introduced above has to be defined. The code for the component is stored under <strong>app/view/ListContainer.js</strong> and that file contains the following code:</p>

<p>``` js</p>

<pre><code>Ext.define('CityBars.view.ListContainer', { extend: 'Ext.Container',
config: {
    layout: {
        type: 'fit'
    },
    items: [
        {
            xtype: 'list',
            id: 'dataList',
            itemTpl: [
                '&lt;img class="photo" src="{photo_url}" width="40" height="40"/&gt;{name}&lt;br/&gt;&lt;img src="{rating_img_url_small}"/&gt;&amp;nbsp;&lt;small&gt;{address1}&lt;/small&gt;'
            ]
        }
    ]
}
}); 
</code></pre>

<p>```</p>

<p>The first two lines of the code</p>

<p>``` js</p>

<pre><code>Ext.define('CityBars.view.ListContainer', { extend: 'Ext.Container',
</code></pre>

<p>```</p>

<p>specify that the view is part of the CityBars application, that it is called <strong>ListContainer</strong> and that its code is stored under the <strong>view</strong> subdirectory. The <strong>ListContainer</strong> View is a <strong>Container</strong>, a standard component of the Sencha Touch framework. As before, the generic <strong>Container</strong> needs to be configured with the components of our interest, in this case a list. This is achieved with the <em>config</em> statement:</p>

<p>``` js</p>

<pre><code>    layout: {
        type: 'fit'
    },
    items: [
        {
            xtype: 'list',
            id: 'dataList',
            itemTpl: [
                '&lt;img class="photo" src="{photo_url}" width="40" height="40"/&gt;{name}&lt;br/&gt;&lt;img src="{rating_img_url_small}"/&gt;&amp;nbsp;&lt;small&gt;{address1}&lt;/small&gt;'
            ]
        }
    ]
</code></pre>

<p>```</p>

<p>The <em>config</em> statement specifies that layout of the <strong>Container</strong> is <em>fit</em>, which means that every component takes the whole width of the device that the application is running on. The only item in the <strong>ListContainer</strong> is a list, with the standard Sencha-Touch type <strong>list</strong> and the identification string of <em>datalist</em>. Every item in the list is rendered according to the html template shown in <em>itemTpl</em>. According to that template, a 40×40 photo, the name of the bar, its rating and its address are displayed in that order.</p>

<p>When a user taps on one of the items of the list, the application displays additional information about the item tapped. Although, at this point, I have not explained how the program will perform that logic (“if a user taps on an item, show a panel with details about the bar”,) let’s assume that the application does that somehow. (I will explain how this is done in a future post). Once the panel with details appears, a View called <strong>DetailPanel</strong> is displayed. The code for that view is shown below:</p>

<p>``` js</p>

<pre><code>Ext.define('CityBars.view.DetailPanel', {
extend: 'Ext.tab.Panel',
config: {
    tabBar: {
        docked: 'top',
        ui: 'dark',
        layout: {
            pack: 'center',
            type: 'hbox'
        }
    },
    items: [
        {
            xtype: 'container',
            id: 'contact',
            title: 'Contact',
            iconCls: 'info',
            items: [
                {
                    xtype: 'container',
                    id: 'info',
                    padding: 10,
                    layout: {
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'component',
                            height: 100,
                            id: 'photo',
                            tpl: [
                                '&lt;img class="photo" src="{photo_url}" width="100" height="100"/&gt;'
                            ],
                            width: 100
                        },
                        {
                            xtype: 'component',
                            id: 'data',
                            padding: 10,
                            tpl: [
                                '&lt;h2&gt;{name}&lt;/h2&gt;',
                                '           &lt;div class="info"&gt;',
                                '           {address1}&lt;br/&gt;',
                                '           &lt;img src="{rating_img_url_small}"/&gt;',
                                '           &lt;/div&gt;'
                            ]
                        }
                    ]
                },
                {
                    xtype: 'container',
                    layout: {
                        pack: 'center',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'button',
                            width: 100,
                            text: 'Call'
                        },
                        {
                            xtype: 'spacer',
                            width: 57
                        },
                        {
                            xtype: 'button',
                            width: 100,
                            text: 'More'
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'map',
            id: 'detailMap',
            title: 'Map',
            iconCls: 'info'
        }
    ]
}
});
</code></pre>

<p>```</p>

<p>To understand the code shown above, refer to an example detail view, shown on the figures below.</p>

<p><a href="http://www.appsandscience.com/wp-content/uploads/2012/03/CityBars2-207x300.png">!</a></p>

<p><a href="http://www.appsandscience.com/wp-content/uploads/2012/03/CityBars2.png">!</a></p>

<p><a href="http://www.appsandscience.com/wp-content/uploads/2012/03/CityBars3-207x300.png">!</a></p>

<p><a href="http://www.appsandscience.com/wp-content/uploads/2012/03/CityBars3.png">!</a></p>

<p>The detail view contains a tab panel with two tabs: The first tab consists of two Container components: The first Container shows an image of the bar, its name, its address, and its rating. The second Container is stacked below the first, and contains two buttons: one that can be used to call the bar and one to that can be tapped to get more information about the bar. Both buttons are inactive in this version of the application.</p>

<p>The second tab panel consists of a Map component that displays the location of the bar on a Google map.</p>

<p>As a result of this arrangement, a tab panel has to be defined using the following code:</p>

<p><code>js
 Ext.define('CityBars.view.DetailPanel', {     extend: 'Ext.tab.Panel',
</code></p>

<p>which describes, as before, that the code for this panel is stored under <strong>app/view/DetailPanel.js</strong>, and that the panel is a special case of a Sencha-Touch component called <strong>tab.Panel</strong>. The configuration of the tab panel is achieved using the following code:</p>

<p>``` js</p>

<pre><code>config: {
     tabBar: {
        docked: 'top',
        ui: 'dark',         
        layout: {
            pack: 'center',
            type: 'hbox'
            }
        }, 
</code></pre>

<p>```</p>

<p>According to the code above, the tab bar is docked at the top of the screen, it has a <em>dark</em> theme and lays out its tabs horizontally (hbox) and centered at the center of the tab panel.</p>

<p>The first tab called ‘Contact’ is the most complicated and it is set up in the following code:</p>

<p>```</p>

<pre><code>xtype: 'container',
id: 'contact',
title: 'Contact',
iconCls: 'info',
items: [{
        xtype: 'container',
        id: 'info',
        padding: 10,
            layout: {
                type: 'hbox'
                },
        items: [{
                xtype: 'component',
                height: 100,
                id: 'photo',
                tpl: ['&lt;img class="photo" src="{photo_url}" width="100" height="100"/&gt;',                     width: 100
                },
                {
                xtype: 'component',
                id: 'data',
                padding: 10,
                tpl: [  '&lt;h2&gt;{name}&lt;/h2&gt;',
                        '&lt;div class="info"',
                        '{address1}&lt;br/&gt;',
                        '&lt;img src="{rating_img_url_small}"/&gt;',
                        '&lt;/div&gt;'
                        ]
                }]},
            {
            xtype: 'container',
            layout: {
                pack: 'center',
                type: 'hbox'
                },
            items: [{
                    xtype: 'button',
                    width: 100,
                    text: 'Call'
                },
                {
                    xtype: 'spacer',
                    width: 57
                },
                {
                    xtype: 'button',
                    width: 100,
                    text: 'More'
                }]
            }
            ]}, 
</code></pre>

<p>```</p>

<p>The first tab is a Sencha-Touch <strong>Container</strong>, with identification <em>contact</em>, title <em>Contact</em>, and has an info icon associated with it (Because this tab panel is docked at the top of the container, the icon is not visible; the icon would be visible if the tab panel were docked at the bottom of the view). This tab contains two <strong>Containers</strong>, as mentioned above. One is the <em>info</em> container that arranges its items horizontally (hbox). The items in it are a 100×100 photo with identification <em>photo</em>, and an html string (with id <em>data</em>) that contains the name, the address and the rating of the bar. The second <strong>Container</strong> centers its three items horizontally; its items are a button with the text <em>Call</em>, a spacer, and a second button with the text <em>More</em>.</p>

<p>The second tab, described with the code below, is a map type with identification <em>detailMap</em>, with title ‘Map’ and an <em>info</em> icon. (As before, because the tab panel is docked at the top of the view, the icon is not visible.). The code below</p>

<p>``` js</p>

<pre><code>xtype: 'map',
id: 'detailMap',
title: 'Map',
iconCls: 'info' 
</code></pre>

<p>```</p>

<p>describes that when the ‘Map’ tab is tapped, a Google map of the bar is shown.</p>

<p>But how the application knows to perform such an action?</p>

<p>The mechanism for this action, as well as that for the action resulting from the user tapping on a list item will be described in a following post that will focus on the application’s <strong>Controller</strong>, as well as on the way by which the application retrieves its data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Structure of a Sencha Touch Application]]></title>
    <link href="http://www.appsandscience.com/the-structure-of-a-sencha-touch-application/"/>
    <updated>2012-03-05T02:00:00-06:00</updated>
    <id>http://www.appsandscience.com/the-structure-of-a-sencha-touch-application</id>
    <content type="html"><![CDATA[<p>In previous posts, I described the <a href="http://www.appsandscience.com/creating-an-iphone-application-with-javascript-the-sencha-touch-solution/">advantages of using Sencha Touch</a> for developing mobile applications, and I introduced <a href="http://www.appsandscience.com/making-sense-of-sencha-touch-the-citybars-app-views/">a few terms used in Sencha Touch</a>. In this post I will continue describing Sencha Touch by explaining the code in a simple application that finds the bars near the user. (I first describe CityBars in a <a href="http://www.appsandscience.com/making-sense-of-sencha-touch-the-citybars-app-views/">previous blog post</a>.</p>

<p>The emphasis of this post will be on describing how code should be organized in Sencha Touch applications, and on analyzing the code of two important files that each Sencha Touch application must have.</p>

<h3>The MVCS architecture and file structure</h3>

<p>Sencha Touch applications follow the <a href="https://en.wikipedia.org/wiki/Model-view-controller">Model-View-Controller</a> (MVC) architecture. The architecture separates the user interface (view) from the structure of the data that the application serves (model) and the controller that handles inputs from the user. Sencha Touch uses an additional concept, that of a Store. A store describes how data are retrieved: from a file, from a web service, etc. In other words, Sencha Touch uses the MVCS architecture.</p>

<p>The organization of files in Sencha Touch is strict allowing developers to structure the application files in a hierarchical order. The structure of an application is shown in Figure 1.</p>

<p>Two files are on the root of the file tree: designer.html and designer.js. (The files are named designer because they are generated by Sencha's IDE, called <a href="http://www.sencha.com/products/designer">Ext Designer</a>.) Under a directory called <em>app</em> there are four directories, one for each component of the MVCS architecture. The names of the directories are standard: controller, model, store, view. Under those directories the source code for each component is stored.</p>

<h3>Comments on the code of <em>designer.html</em></h3>

<p>The contents of designer.html are shown and explained below.</p>

<p>First, designer.html in its entirety:</p>

<p>``` html</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
    &lt;title&gt;City Bars&lt;/title&gt;
    &lt;link rel="stylesheet" type="text/css" href="http://extjs.cachefly.net/touch/sencha-touch-designer-edition/resources/css/sencha-touch.css"/&gt;
    &lt;script type="text/javascript" src="http://extjs.cachefly.net/touch/sencha-touch-designer-edition/sencha-touch-all-debug.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="designer.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>```</p>

<p>Within the header of the html document, several of its characteristics are defined. With</p>

<p>``` html</p>

<pre><code>&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;title&gt;City Bars&lt;/title&gt;
</code></pre>

<p>```</p>

<p>the encoding (UTF-8) and the title of the document are defined.</p>

<p>The following line defines the cascading style sheet that determines the look of the elements such as buttons, tabs, colors etc. of the user interface.</p>

<p>``` html</p>

<pre><code>&lt;link rel="stylesheet" type="text/css" href="http://extjs.cachefly.net/touch/sencha-touch-designer-edition/resources/css/sencha-touch.css"/&gt;
</code></pre>

<p>```</p>

<p>The style sheet is served on-demand by the CacheFly content delivery network. Such a service is not necessary for an actual mobile application. In such an application the style sheet can be saved locally, and accessed rapidly. The following line includes the link to the source code of Sencha Touch:</p>

<p>``` html</p>

<pre><code>&lt;script type="text/javascript" src="http://extjs.cachefly.net/touch/sencha-touch-designer-edition/sencha-touch-all-debug.js"&gt;&lt;/script&gt;
</code></pre>

<p>```</p>

<p>In this case, the debug version of the source code is accessed through an online repository. Although the debug version of the source code is appropriate for development, the production version is used for actual applications.</p>

<p>Because the CityBars application needs to render maps, the Google maps api is loaded with the following code:</p>

<p>``` html</p>

<pre><code>&lt;script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"&gt;&lt;/script&gt;
</code></pre>

<p>```
Finally, the source code of the application is included with the following line:</p>

<p>``` html</p>

<pre><code>&lt;script type="text/javascript" src="designer.js"&gt;&lt;/script&gt;
</code></pre>

<p>```</p>

<p>Because the source code of the application was generated using Sencha's Designer, the JavaScript code is called designer.js.</p>

<h3>Comments on the code of <em>designer.js</em></h3>

<p>The content of designer.js is shown below:</p>

<p>``` js</p>

<pre><code>Ext.Loader.setConfig({
    enabled: true
});
Ext.application({
    name: 'CityBars',
    models: [
        'Business'
    ],
    views: [
        'MainNav',
        'ListContainer',
        'DetailPanel'
    ],
    controllers: [
        'Business'
    ],
    stores: [
        'BusinessStore'
    ],
    launch: function() {
        Ext.create('CityBars.view.Viewport');
    }
});
</code></pre>

<p>```</p>

<p>The line</p>

<p>``` js</p>

<pre><code>Ext.Loader.setConfig({
    enabled: true
});
</code></pre>

<p>```</p>

<p>instructs the application to load the necessary Sencha Touch classes on demand. This allows the optimization of the initial load time of the application and loading the modules only when the user requests. In the</p>

<p>``` js</p>

<pre><code>Ext.application({
})
</code></pre>

<p>```</p>

<p>section, several characteristics of the application are defined. First, the name of the application is given.</p>

<p>``` js</p>

<pre><code>name: 'CityBars',
</code></pre>

<p>```</p>

<p>The model of the application, <em>Business.js</em> is referenced next. <em>Business.js</em> contains the names and types of the fields that are served by Yelp.</p>

<p>``` js</p>

<pre><code>models: [
    'Business'
],
</code></pre>

<p>```</p>

<p>As I described in a previous <a href="http://www.appsandscience.com/making-sense-of-sencha-touch-the-citybars-app-views/">blog post</a>, the application has three views: the MainNav view that provides a navigation bar, the ListContainer with the list of Bars, and the DetailPanel with information about each bar. These views are referenced in the following:</p>

<p>``` js</p>

<pre><code>views: [
    'MainNav',
    'ListContainer',
    'DetailPanel'
],
</code></pre>

<p>```</p>

<p>The application has a single controller that finds the user location, finds nearby Bars, and responds to the user tapping of an item in the ListContainer. The controller is referenced as follows:</p>

<p>``` js</p>

<pre><code>controllers: [
    'Business'
],
</code></pre>

<p>```</p>

<p>Also, the data for the application are going to be served in <a href="https://en.wikipedia.org/wiki/JSONP">JSONP</a> format from Yelp, and that information needs to be stored in the <em>BusinessStore.js</em>, which in turn needs to be referenced in the application:</p>

<p>``` js</p>

<pre><code>stores: [
    'BusinessStore'
],
</code></pre>

<p>```</p>

<p>Finally, when the application starts, the <em>Viewport.js</em> view is loaded. This behavior is described below:</p>

<p>``` js</p>

<pre><code>launch: function() {
    Ext.create('CityBars.view.Viewport');
}
</code></pre>

<p>```</p>

<p>The Viewport of this application loads the MainNav.</p>

<h3>Conclusion</h3>

<p>I just described the code contained in two files of the application: designer.html and designer.js. In future posts, the code for the models, views, controllers and stores will be described.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Sense of Sencha Touch: The CityBars App - Views]]></title>
    <link href="http://www.appsandscience.com/making-sense-of-sencha-touch-the-citybars-app-views/"/>
    <updated>2012-02-20T02:00:00-06:00</updated>
    <id>http://www.appsandscience.com/making-sense-of-sencha-touch-the-citybars-app-views</id>
    <content type="html"><![CDATA[<p>In a previous <a href="http://www.appsandscience.com/creating-an-iphone-application-with-javascript-the-sencha-touch-solution/">post</a>, I described the advantages of using Sencha Touch to develop applications for mobile platforms. In this post I would like to describe a few Sencha Touch concepts.</p>

<p>If you would like to see how a Sencha Touch application works, check out the <a href="http://dev.sencha.com/deploy/touch/examples/kitchensink/">kitchensink</a> application that has been created by the developers of Sencha Touch. You will be able to preview the JavaScript code that generates these views and you will be surprised by the relative short length of the code, at least compared to that necessary in Objective-C.</p>

<p>Some additional digging around might show you that it's not very easy to program in Sencha Touch. Although Sencha Touch is easier to pick up compared to Objective-C, especially for web developers, the platform is not very straightforward. Mostly because of the complicated terminology used in Sencha Touch, and the dearth of books on the subject: the <a href="http://www.amazon.com/gp/product/1849515441/ref=as_li_ss_tl?ie=UTF8&amp;tag=appsandscienc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1849515441">Sencha Touch Cookbook</a> is the only currently published book on Sencha Touch and it covers version 1.1, and not the current version 2.</p>

<p>This will be the first in a series of blog posts that aim to describe how to develop, build and deploy a mobile application using Touch 2. After you read this and the upcoming posts you will be able to</p>

<ul>
<li>understand several concepts of Sencha Touch,</li>
<li>follow along with <a href="http://vimeo.com/36420727">this</a> and other screencasts created by Sencha</li>
<li>use Sencha's Designer to create the application from scratch.</li>
</ul>


<p>For all the posts I will use the CityBars application that is explained in this screencast and its source code is available here.</p>

<p>CityBars finds the location of the user and lists nearby bars. The application provides that same results that you would obtain using Yelp's mobile application because the information about each bar is pulled from Yelp. In this post I will describe the components of the graphical user interface of CityBars. In future posts, I will write about the way that CityBars is pulling data from the Internet, how it finds the location of the user and how it responds to user taps.</p>

<p>The application contains two types of screens. One that shows the list of the bars and one that shows details about the bar. This is a Master-Detail type of application.</p>

<p>Common to both screens of the CityBars application is a navigation bar docked on the top of the screen. In Sencha Touch 2 terminology the navigation bar is an example of a <strong>NavigationView</strong> component. (Important: All Sencha Touch 2 terms will be written in bold from now on.) When an item below the navigation bar is tapped the navigation bar changes its title to match that of the tapped item and a Back button appears.</p>

<p>Below the navigation bar there are two screens or <strong>Views</strong>. The first one shows a list a Dataview.List of the bars in the area.
<img class="center" src="http://appsandscience.com/images/CityBars1.png" width="300" height="300" title="Sencha Touch CityBars application" alt="Sencha Touch CityBars application"></p>

<p>The second view is more complicated because it contains a tab panel (<strong>tabPanel</strong>) with two tabs: <img class="center" src="http://appsandscience.com/images/CityBars2.png" width="300" height="300" title="Sencha Touch CityBars application" alt="Sencha Touch CityBars application">
The first tab panel consists of two Container components. The first Container shows an image of the bar its name its address and its rating. The second Container is stacked below the first and contains two buttons: one that can be used to call the bar and one to that can be tapped to get more information about the bar. Both buttons are inactive in this version of the application.</p>

<p>The second panel <img class="center" src="http://appsandscience.com/images/CityBars3.png" width="300" height="300" title="Sencha Touch CityBars application" alt="Sencha Touch CityBars application"> consists of a <strong>Map</strong> component that displays the location of the bar on a Google map. Unfortunately, there is no simple correspondence between what a user would call a screen and what Sencha Touch calls a <strong>View</strong>. According to Sencha Touch, the first screen the list of bars contains two components: The <strong>NavigationView</strong> and below it a <strong>Container</strong> that displays the <strong>DataView.List</strong> or simply the list. Similarly the second screen contains a tabPanel with a tabBar on the top and two different tabs each of which contains one or more Container components.</p>

<p>I will now describe each screen of CityBars using Sencha Touch terminology. The descriptions below will be useful in a future post when I look at the application code.</p>

<p>The <strong>NavigationView</strong> component has a <strong>light</strong> theme as opposed to the <strong>default</strong> dark theme. There is a single item contained in the <strong>NavigationView</strong> with the title CityBars and that item is a <strong>List Container</strong>. The list Container is set to fit the entire space available to it with the following item: A 40x40 pixel image of the bar and next to it its name, its rating and its address. When a user taps on an item, the app displays a <strong>tab.Panel</strong> which is docked to the top of the screen. The <strong>tab.Panel</strong> looks darker than the navigation bar and its tabs are arranged horizontally and centered across the bar. By default the application displays the Contact tab which consists of the Contact <strong>Container</strong> (Figure 2). The <strong>Container</strong> in turn, contains several <strong>Container</strong> components itself.</p>

<p>The first <strong>Container</strong> contains two <strong>Components</strong>: One that shows a 100x100 pixel photo of the bar and a second that shows the bar name address and rating. The second <strong>Container</strong> <strong>packs</strong> in the center and <strong>stacks</strong> horizontally a Call <strong>Button</strong> a <strong>Spacer</strong> and a More <strong>Button</strong>. When the tab called Map is tapped the app shows the <strong>Map Container</strong> (Figure 3). The <strong>Container</strong> is titled Map and contains a single <strong>Map Component</strong>.</p>

<p>Next time I will provide the code of the application views and explain it line-by-line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an iPhone application with JavaScript: The Sencha Touch solution]]></title>
    <link href="http://www.appsandscience.com/creating-an-iphone-application-with-javascript-the-sencha-touch-solution/"/>
    <updated>2012-02-13T02:00:00-06:00</updated>
    <id>http://www.appsandscience.com/creating-an-iphone-application-with-javascript-the-sencha-touch-solution</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://appsandscience.com/images/sencha.png" width="300" height="300" title="Sencha Touch logo" alt="Sencha Touch logo"></p>

<p>During the past few months, I spent countless hours studying Objective-C, the language used for iPhone and iPad app development. Just to give you an idea, the books and tutorials I have studied from include</p>

<ol>
<li><p><a href="http://www.amazon.com/gp/product/1430236027/ref=as_li_ss_tl?ie=UTF8&amp;tag=appsandscienc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1430236027">iPhone and iPad Apps for Absolute Beginners, iOS 5 Edition</a> by Rory Lewis,</p></li>
<li><p><a href="http://www.amazon.com/gp/product/0321773772/ref=as_li_ss_tl?ie=UTF8&amp;tag=appsandscienc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321773772">iOS Programming: The Big Nerd Ranch Guide (2nd Edition)</a>, by Aaron Hillegass,</p></li>
<li><p><a href="http://www.amazon.com/gp/product/0321706285/ref=as_li_ss_tl?ie=UTF8&amp;tag=appsandscienc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321706285">Objective-C Programming: The Big Nerd Ranch Guide</a>, by Aaron Hillegass,</p></li>
<li><p><a href="http://itunes.apple.com/itunes-u/ipad-iphone-application-development/id473757255">iPad and iPhone Application Development</a>, by Paul Hegarty, and</p></li>
<li><p><a href="http://www.video2brain.com/en/products-193.htm">Video2Brain: Getting Started with iOS 5</a>, by Robert Turrall.</p></li>
</ol>


<p>All these books and tutorials taught me a lot about Objective-C but mostly that it is a very hard language to learn. In addition, Objective-C is only useful for developing iPhone/iPad applications. But how could I develop applications that can run on Android devices? Would I need to reprogram my apps in Java, the language used by Android? I was hoping that I could find a platform that could convert a single program into apps that can run on multiple operating systems (Apple, Android, even Blackberry) and multiple devices (smartphones, tablets, or the web). I was astonished to find out that many such languages exists (see the Wikipedia page on <a href="http://en.wikipedia.org/wiki/Mobile_development#Platform_development_environment">Mobile Development</a> for an exhaustive list.)</p>

<p>Now my problem became which platform to choose. I experimented with several of them.</p>

<ul>
<li><p>First, I worked with <a href="http://www.canappi.com/">Canappi</a>. (See my <a href="http://www.appsandscience.com/creating-an-iphone-application-without-coding-the-tiggzi-solution/">blog post</a> for a detailed description.) Canappi uses a specialized language (MDSL) that can be used to generate Objective-C code. Unfortunately, the code that Canappi generates has includes deprecated statements, probably as a result of Canappi being the product of a single developer.</p></li>
<li><p>Then, I looked at <a href="http://www.canappi.com/">Tiggzi</a>. (See my <a href="http://www.appsandscience.com/creating-an-iphone-application-without-coding-the-tiggzi-solution/">blog post</a> for a detailed description.) Tiggzi uses a GUI that helps you create iPhone and Android applications without any coding. Tiggzi is a useful tool, but it's not free and open-source.</p></li>
<li><p>I also looked at <a href="http://www.anscamobile.com/corona/">Corona SDK</a>, a platform that uses the scripting language Lua. Corona SDK is commonly used to develop 2D games, with several iPhone games on the app store, but not for business, data-driven applications.</p></li>
<li><p>I finally looked at ways of creating apps using HTML5 and its associated technologies, JavaScript and Cascading Style Sheets (CSS). Although I briefly looked at Dreamweaver, I was turned off by its price. It was at that point that I looked into <a href="http://www.sencha.com/blog/sencha-touch-2-raising-the-bar/">Sencha Touch</a>.</p></li>
</ul>


<p>Sencha Touch is a JavaScript library built for the development of web applications that look native on mobile devices. After I read some of its <a href="http://docs.sencha.com/touch/2-0/">documentation</a> and reviewed the <a href="http://dev.sencha.com/deploy/touch/examples/kitchensink/">kitchensink</a> application developed with Sencha Touch, I decided to spend some time to learn the platform. There are several advantages to Sencha Touch.</p>

<p>Sencha Touch</p>

<ol>
<li><p>Is free and fast (especially its latest version.)</p></li>
<li><p>Simplifies the creation of nested views and the insertion of images on table entries.</p></li>
<li><p>Works with Phonegap but it also allows native packaging.</p></li>
<li><p>Uses the MVC (model-view-controller) architecture for code organization and reusability.</p></li>
<li><p>Aims to support Windows phones in the future.</p></li>
</ol>


<p>Unfortunately, Sencha Touch, has a steep learning curve, like Objective-C, but unlike Objective-C, there are not that many books that describe its use, apart from the very useful <a href="http://www.amazon.com/gp/product/1849515441/ref=as_li_ss_tl?ie=UTF8&amp;tag=appsandscienc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1849515441">Sencha Touch Cookbook</a>, by Ajit Kumar.</p>

<p>I hope to slowly learn the platform in order to be able to quickly and robustly develop data driven applications. Future blog post will describe my progress in using Sencha Touch.</p>
]]></content>
  </entry>
  
</feed>
